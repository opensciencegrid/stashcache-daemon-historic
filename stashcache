#!/bin/env python
'''
Shim script to manage XRootD server under condor_master
'''

import os
import re
import sys
import socket
import signal
import Queue
import threading
import time
import htcondor
import xrootd_cache_stats

from subprocess import Popen, PIPE

_exception_queue = Queue.Queue(0)
_accepted_signals = {signal.SIGHUP:'restart',
                     signal.SIGQUIT:'stop',
                     signal.SIGTERM:'stop'}

class CondorException(Exception):
    pass

class XrootdException(Exception):
    pass

class HeartBeatThread(threading.Thread):
    '''Thread to send heartbeats and cache ads to the master'''
    def __init__(self, url, exception_queue):
        self.url = url
        self.exceptions = exception_queue
        threading.Thread.__init__(self)
        self.setDaemon(True)

    def _raise_exception(self, exception):
        '''Place exception in the queue so the main thread can raise it'''
        self.exceptions.put(exception)
        signal.alarm(1)
        sys.exit(1)

    def run(self):
        xrootd_addr = 'root://' + self.url
        coll = htcondor.Collector(self.url)
        master_ad = None
        while not master_ad:
            try:
                master_ad = coll.locate(htcondor.DaemonTypes.Master)
            except ValueError: # Master has not advertised to the collector yet
                pass
            except IOError: # Failed communication with collector
                self._raise_exception(CondorException('Could not locate Collector at %s' % self.url))

        while True:
            cache_ad = xrootd_cache_stats.collect_cache_stats(xrootd_addr, '/stash')
            if cache_ad['ping_response_status'] == 'ok':
                try:
                    htcondor.send_alive(master_ad)
                except RuntimeError:
                    self._raise_exception(CondorException('Failed to deliver keepalive message'))
                # ads expire every 15 min while heartbeats should be done every 30 min
                for i in range(2):
                    coll.advertise([cache_ad])
                    time.sleep(900)
            else:
                self._raise_exception(XrootdException('No heartbeat from xrootd server'))

def raise_heartbeat_exception(signum, frame):
    '''Raise exception from heartbeat thread'''
    error = _exception_queue.get()
    kill_xrootd()
    raise error

def manage_xrootd(signum, frame):
    '''Signal handler for the XRootD service'''
    rc, _, _ = xrootd_service_command(_accepted_signals[signum])
    if rc != 0:
        kill_xrootd()
        # Restart service if user requested it
        if signum == signal.SIGHUP:
            start_xrootd()
    if signum == signal.SIGQUIT or signum == signal.SIGTERM:
        sys.exit(0)

def start_xrootd():
    '''Starts the XRootD init service'''
    rc, stdout, _ = xrootd_service_command('start')
    if rc != 0:
        raise RuntimeError('Could not start XRootD service: %s' % stdout)

def kill_xrootd():
    '''Sends SIGKILL to an unresponsive XRootD service'''
    rc, stdout, _ = xrootd_service_command('status')
    try:
        pid = int(re.search(r'\(pid\s+(\d+)\)', stdout).group(1))
    except AttributeError:
        raise RuntimeError('Could not find XRootD service PID')
    else:
        os.kill(pid, signal.SIGKILL)

def xrootd_service_command(cmd):
    '''Accepts an init command and passes it to the XRootD init script'''
    rc, stdout, stderr = run_command(['service', 'xrootd', cmd])
    return rc, stdout, stderr

def run_command(command):
    p = Popen(command, stdout=PIPE, stderr=PIPE)
    stdout, stderr = p.communicate()
    return p.returncode, stdout, stderr

def main():
    start_xrootd()
    hostname = socket.gethostname()
    heartbeat = HeartBeatThread(hostname, _exception_queue)
    heartbeat.start()

    # Accept HTCondor daemon signals
    for signum in _accepted_signals.iterkeys():
        signal.signal(signum, manage_xrootd)
    signal.signal(signal.SIGALRM, raise_heartbeat_exception)
    while True:
        signal.pause()

if __name__ == '__main__':
    try:
        main()
    except (XrootdException, CondorException, RuntimeError), e:
        print e
        sys.exit(1)

